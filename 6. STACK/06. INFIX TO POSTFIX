import java.util.Stack;
import java.util.HashMap;
import java.util.*;
public class Solution {
    public static int prec(char c) {
        if (c == '^') {
            return 3;
        } else if (c == '/' || c == '*') {
            return 2;
        } else if (c == '+' || c == '-') {
            return 1;
        } else {
            return -1;
        }
    }
    public static String infixToPostfix(String exp) {
        StringBuilder sb = new StringBuilder("");
        Stack<Character> s = new Stack<>();
        for (int i = 0; i < exp.length(); i++) {
            char c = exp.charAt(i);
            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '1' && c <= '9')) {
                sb.append(c);
            } else if (c == '(') {
                s.push(c);
            } else if (c == ')') {
                while (!s.isEmpty() && s.peek() != '(') {
                    sb.append(s.pop());
                }
                s.pop(); 
            } else {
                while (!s.isEmpty() && prec(c) <= prec(s.peek())) {
                    sb.append(s.pop());
                }
                s.push(c);
            }
        }
        while (!s.isEmpty()) {
            sb.append(s.pop());
        }
        return sb.toString();
    }
}
