import java.util.*;
import java.util.HashMap;
import java.util.Stack;

public class Solution {
    public static int prec(char c) {
        if (c == '^') {
            return 3;
        } else if (c == '/' || c == '*') {
            return 2;
        } else if (c == '+' || c == '-') {
            return 1;
        } else {
            return -1;
        }
    }
    public static String infixToPostfix(String exp) {
        StringBuilder sb = new StringBuilder("");
        Stack<Character> s = new Stack<>();
        for (int i = 0; i < exp.length(); i++) {
            char c = exp.charAt(i);
            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '1' && c <= '9')) {
                sb.append(c);
            } else if (c == '(') {
                s.push(c);
            } else if (c == ')') {
                while (!s.isEmpty() && s.peek() != '(') {
                    sb.append(s.pop());
                }
                s.pop(); 
            } else {
                while (!s.isEmpty() && prec(c) <= prec(s.peek())) {
                    sb.append(s.pop());
                }
                s.push(c);
            }
        }
        while (!s.isEmpty()) {
            sb.append(s.pop());
        }
        return sb.toString();
    }
    public static String prefixToInfixConversion(String exp) {
        Stack<String> S=new Stack<>();
        StringBuilder sb=new StringBuilder();
        String ch1="",ch2="";
        for(int i=exp.length()-1;i>=0;--i ){
            char ch=exp.charAt(i);
            if(ch>='A'&&ch<='Z'||ch>='a'&&ch<='z'|| ch>='0'&&ch<='9'){
                S.push(Character.toString(ch));
            }
            else if(ch=='/'||ch=='*'||ch=='+'||ch=='-'){
                if(!S.isEmpty()){
                    ch1=S.peek();
                    S.pop();
                     }
                     if(!S.isEmpty()){
                          ch2=S.peek();
                          S.pop();
                     }
                     sb.append('(');
                     sb.append(ch1);
                     sb.append(ch);
                     sb.append(ch2);
                     sb.append(')');
                     S.push(sb.toString());
                     sb.setLength(0);
                     }
        }
        while(!S.isEmpty()){
            sb.append(S.peek());
            S.pop();
        }
        return sb.toString();
    }

    public static String preToPost(String s) {
        String str=prefixToInfixConversion(s);
        return infixToPostfix(str);
    }
}
