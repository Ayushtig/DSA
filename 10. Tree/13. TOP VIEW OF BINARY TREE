import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.*;
import java.util.Collections;
import java.util.Queue;
import java.util.TreeMap;

class Pair {
  int dis;
    TreeNode node;
    Pair(int dis, TreeNode node) {
        this.dis = dis;
        this.node = node;
    }
}
public class Solution {
    public static List<Integer> getTopView(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        Queue<Pair> q = new LinkedList<>();
        Map<Integer, Integer> tm = new TreeMap<>();
        q.add(new Pair(0, root));
        while (!q.isEmpty()) {
            Pair curr = q.poll();
            if(!tm.containsKey(curr.dis)){
                tm.put(curr.dis, curr.node.data);
            }
            if (curr.node.left != null)
                q.add(new Pair(curr.dis - 1, curr.node.left));
            if (curr.node.right != null)
                q.add(new Pair(curr.dis + 1, curr.node.right));
        }
        for (Map.Entry<Integer, Integer> m : tm.entrySet())
            ans.add(m.getValue());
        return ans;
    }
}
